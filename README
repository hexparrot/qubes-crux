USING CRUX AS A QUBES VIRTUAL MACHINE
------------------------------------------

The current steps will help you install CRUX on a HVM in Qubes.
The following features are currently implemented:

* dom0 I/O and cross-vm copy-paste
* qvm-* commands
* mounts private drive (xvdb)
* working audio
* ships with Firefox
* HVM, PVH, PV

Currently not working:

* firewall rules from dom0
* /rw/config (e.g., rc.local)
* qubes iptables service

* xvd* size changes
* swap partition (xvdc)
(these are both part of the initramfs)


INSTALLATION STEPS
------------------------------------------

General idea:

1) Download the CRUX ISO, and boot a new Qube from the ISO.
2) Get the internet working on the new qube, then download these helper scripts.
3) Run the helpers scripts to install CRUX to your permanent system (xvda3),
build a minimal kernel, and build all Qubes components.
4) Reboot and test operation.
5) Clone Standalone to TemplateVM, create AppVM.

Ensure this Qube has enough memory to compile a kernel, e.g., 2048MB+ to be safe]

Specifics:

In VM 'crux':

# export IP=10.137.0.x
# export GW=10.137.0.y
# export DEV=eth0

# ifconfig $DEV up
# ip route add $GW dev $DEV
# ip route add default via $GW
# ip addr add $IP/32 dev $DEV
# ip link set $DEV up

# echo 'nameserver 10.139.1.1' >> /etc/resolv.conf

# wget --no-check-certificate https://github.com/hexparrot/qubes-crux/tarball/master
# tar -xf master
# cd hexparrot*/helpers
# ./00_full_install
# reboot

And you're done! It's a working qube, perfect for DispVMs or main use
by installing additional software using CRUX' ports system. See prt-get.

In dom0:

$ qvm-clone --class TemplateVM crux crux_template

For using PV/PVH mode, in dom0:

$ cd /var/lib/qubes/vm-kernels
$ qvm-run -p crux 'cat /usr/ports/qubes-crux/helpers/kernel.tar.gz' | tar xzf -

