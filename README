USING CRUX AS A QUBES VIRTUAL MACHINE
------------------------------------------

The current steps will help you install CRUX on a HVM in Qubes.
The following features are currently implemented:

* dom0 I/O and cross-vm copy-paste
* qvm-* commands
* mounts private drive (xvdb)
* working audio
* ships with Firefox

Currently not working:

* firewall rules from dom0
* xvd* size changes
* swap partition (xvdc)
* /rw/config
* qubes iptables service

Working, but not yet documented:

* PVH integration (use dom0 kernel, dom0 config)


INSTALLATION STEPS
------------------------------------------

General idea:

Create a file-based block device in dom0 and attach to a throwaway qube.
From the throwaway, mount, then clone the `qubes-crux` repository to it.
Download the CRUX ISO, and boot a new Qube from the ISO.
Detach the mount from the throwaway, attach it now to the empty CRUX qube.
Mount the block device to CRUX from the Live terminal prompt.
Run the helper/crux_* scripts to install CRUX to your permanent system (xvda1).
Reboot and enter the fresh CRUX installation, build the Qubes components.
Reboot and enjoy a CRUX TemplateVM.

Specifics:

In VM 'crux'-
[ensure this qube has enough memory to compile a kernel, e.g., 2048MB+ to be safe]
# export IP=10.137.0.x
# export GW=10.137.0.y
# export DEV=eth0

# ifconfig $DEV up
# ip route add $GW dev $DEV
# ip route add default via $GW
# ip addr add $IP/32 dev $DEV
# ip link set $DEV up

# echo 'nameserver 10.139.1.1' >> /etc/resolv.conf

# wget --no-check-certificate https://github.com/hexparrot/qubes-crux/tarball/master
# tar -xf master
# cd hexparrot*/helpers
# ./00_full_install
# reboot

And you're done! It's a working qube, perfect for DispVMs or main use
by installing additional software using CRUX' ports system. See prt-get.

